'use strict'
var problem = `The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
\n
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
\n
Let us list the factors of the first seven triangle numbers:
\n
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
\n
What is the value of the first triangle number to have over five hundred divisors?`
console.log(problem);

//from http://stackoverflow.com/questions/22130043/trying-to-find-factors-of-a-number-in-js
function getFactors(num) {
    var factors = [1]; // 1 will be a part of every solution.
    var half = Math.floor(num / 2), // Ensures a whole number <= num.
        i, j;

    // Determine our increment value for the loop and starting point.
    num % 2 === 0 ? (i = 2, j = 1) : (i = 3, j = 2);

    for (i; i <= half; i += j) {
        num % i === 0 ? factors.push(i) : false;
    }

    factors.push(num); // Always include the original number.
    return factors.length;
}


function solution () {
    var answerNotFound = true;
    var i = 11114;
    var triangular_number = 0;
    for (var _i=0;_i<=i;_i++) triangular_number+=_i;
    var factors_number = getFactors(triangular_number);
    i++;
	while (factors_number < 500) {
        if (triangular_number % 10 == 0) {
            factors_number = getFactors(triangular_number);
        }
        triangular_number += i;
        i++;
    }
    return triangular_number-i+1;
}

function solve () {
  return "Answer: " + solution();
}

console.log (solve());
